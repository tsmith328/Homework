Practice Exam 1 Answers

1.
a) O(1)
b) O(1)
c) O(n)
d) O(n)
e) Queue
f) import java.util.ArrayList
g) ArrayList<Customer> arrList = new ArrayList<Customer>(100);

2.
public class DoublyLinkedList {
	protected Node head; // Note there is no tail reference.
	public void addToFront(String data) {
		head = new Node(data, head, null);
	}
	public void removeFirstOccurrence(String data) { // complete the code
		// It removes the node having the first occurrence of the target data.
		// The search starts at the head. If the target data is not in the list, then
		// the list remains unchanged. The code should not fail.
		// The next field of the last node has value null. There is no tail reference.
		// Write your code here:
		Node current = head;
		while (current.next != null) {
			if (current.data == data) {
				Node nextNode = current.next;
				Node prevNode = current.previous;
				nextNode.previous = prevNode;
				prevNode.next = nextNode;
				return;
			}
			current = current.next;
		}
		return;
	}
	
	protected class Node {
		protected String data;
		protected Node next;
		protected Node previous;
		private Node(String data, Node next, Node previous) {
			this.data = data;
			this.next = next;
			this.previous = previous;
		}
	} // end of Node class
} // end of DoublyLinkedList class

3. 
public class IterableDoublyLinkedList extends DoublyLinkedList implements Iterable {
	public DoublyLinkedListIterator iterable() {
		return new DoublyLinkedListIterator();
	}
	
	private class DoublyLinkedListIterator implements Iterator {
		Node position = head;
		public node next() {
			if (!this.hasNext()) {
				throw new java.util.NoSuchElementException();
			}
			Node ret = position;
			position = position.next;
			return ret;
		}
		
		public boolean hasNext() {
			return (position.next != null);
		}
	}
}

4.
public class Stack<T> implements StackADT<T> {
	private T[] stack;
	private int numEl;
	private final int MAX_SIZE = 100;
	
	public Stack() {
		stack = (T[]) (new Object[MAX_SIZE]);
		numEl = 0;
	}
	
	public void push(T item) {
		if(numEl == MAX_SIZE) {
			throw new RuntimeException();
		}
		stack[numEl - 1] = item;
		numEl++;
	}
	
	public T pop() {
		if (this.isEmpty()) {
			throw new java.util.EmptyStackException();
		}
		T out = stack[numEl - 1];
		stack[numEl - 1] = null;
		numEl--;
		return out;
	}
	
	public boolean isEmpty() {
		return numEl == 0;
	}
}